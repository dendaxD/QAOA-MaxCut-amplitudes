nqubits = 4;
name = "4v0";
nstates = 2;

amplitude[x1_,y1_,x2_,y2_,x3_,y3_] := (Exp[-6.0 I y3]*(Exp[-6.0 I y2]*(Exp[-6.0 I y1] (1 Cos[x1]^4 + 1 (-I Sin[x1])^4) + Exp[-0.0 I y1] (4 (-I Sin[x1])^1 Cos[x1]^3 + 4 (-I Sin[x1])^3 Cos[x1]^1) + Exp[2.0 I y1] (6 (-I Sin[x1])^2 Cos[x1]^2))*(1 Cos[x2]^4 + 1 (-I Sin[x2])^4) + Exp[-0.0 I y2]*(Exp[-6.0 I y1] (1 (-I Sin[x1])^1 Cos[x1]^3 + 1 (-I Sin[x1])^3 Cos[x1]^1) + Exp[-0.0 I y1] (1 Cos[x1]^4 + 1 (-I Sin[x1])^4 + 6 (-I Sin[x1])^2 Cos[x1]^2) + Exp[2.0 I y1] (3 (-I Sin[x1])^1 Cos[x1]^3 + 3 (-I Sin[x1])^3 Cos[x1]^1))*(4 (-I Sin[x2])^1 Cos[x2]^3 + 4 (-I Sin[x2])^3 Cos[x2]^1) + Exp[2.0 I y2]*(Exp[-6.0 I y1] (2 (-I Sin[x1])^2 Cos[x1]^2) + Exp[-0.0 I y1] (4 (-I Sin[x1])^1 Cos[x1]^3 + 4 (-I Sin[x1])^3 Cos[x1]^1) + Exp[2.0 I y1] (1 Cos[x1]^4 + 1 (-I Sin[x1])^4 + 4 (-I Sin[x1])^2 Cos[x1]^2))*(6 (-I Sin[x2])^2 Cos[x2]^2))*(1 Cos[x3]^4 + 1 (-I Sin[x3])^4) + Exp[-0.0 I y3]*(Exp[-6.0 I y2]*(Exp[-6.0 I y1] (1 Cos[x1]^4 + 1 (-I Sin[x1])^4) + Exp[-0.0 I y1] (4 (-I Sin[x1])^1 Cos[x1]^3 + 4 (-I Sin[x1])^3 Cos[x1]^1) + Exp[2.0 I y1] (6 (-I Sin[x1])^2 Cos[x1]^2))*(1 (-I Sin[x2])^1 Cos[x2]^3 + 1 (-I Sin[x2])^3 Cos[x2]^1) + Exp[-0.0 I y2]*(Exp[-6.0 I y1] (1 (-I Sin[x1])^1 Cos[x1]^3 + 1 (-I Sin[x1])^3 Cos[x1]^1) + Exp[-0.0 I y1] (1 Cos[x1]^4 + 1 (-I Sin[x1])^4 + 6 (-I Sin[x1])^2 Cos[x1]^2) + Exp[2.0 I y1] (3 (-I Sin[x1])^1 Cos[x1]^3 + 3 (-I Sin[x1])^3 Cos[x1]^1))*(1 Cos[x2]^4 + 1 (-I Sin[x2])^4 + 6 (-I Sin[x2])^2 Cos[x2]^2) + Exp[2.0 I y2]*(Exp[-6.0 I y1] (2 (-I Sin[x1])^2 Cos[x1]^2) + Exp[-0.0 I y1] (4 (-I Sin[x1])^1 Cos[x1]^3 + 4 (-I Sin[x1])^3 Cos[x1]^1) + Exp[2.0 I y1] (1 Cos[x1]^4 + 1 (-I Sin[x1])^4 + 4 (-I Sin[x1])^2 Cos[x1]^2))*(3 (-I Sin[x2])^1 Cos[x2]^3 + 3 (-I Sin[x2])^3 Cos[x2]^1))*(4 (-I Sin[x3])^1 Cos[x3]^3 + 4 (-I Sin[x3])^3 Cos[x3]^1) + Exp[2.0 I y3]*(Exp[-6.0 I y2]*(Exp[-6.0 I y1] (1 Cos[x1]^4 + 1 (-I Sin[x1])^4) + Exp[-0.0 I y1] (4 (-I Sin[x1])^1 Cos[x1]^3 + 4 (-I Sin[x1])^3 Cos[x1]^1) + Exp[2.0 I y1] (6 (-I Sin[x1])^2 Cos[x1]^2))*(2 (-I Sin[x2])^2 Cos[x2]^2) + Exp[-0.0 I y2]*(Exp[-6.0 I y1] (1 (-I Sin[x1])^1 Cos[x1]^3 + 1 (-I Sin[x1])^3 Cos[x1]^1) + Exp[-0.0 I y1] (1 Cos[x1]^4 + 1 (-I Sin[x1])^4 + 6 (-I Sin[x1])^2 Cos[x1]^2) + Exp[2.0 I y1] (3 (-I Sin[x1])^1 Cos[x1]^3 + 3 (-I Sin[x1])^3 Cos[x1]^1))*(4 (-I Sin[x2])^1 Cos[x2]^3 + 4 (-I Sin[x2])^3 Cos[x2]^1) + Exp[2.0 I y2]*(Exp[-6.0 I y1] (2 (-I Sin[x1])^2 Cos[x1]^2) + Exp[-0.0 I y1] (4 (-I Sin[x1])^1 Cos[x1]^3 + 4 (-I Sin[x1])^3 Cos[x1]^1) + Exp[2.0 I y1] (1 Cos[x1]^4 + 1 (-I Sin[x1])^4 + 4 (-I Sin[x1])^2 Cos[x1]^2))*(1 Cos[x2]^4 + 1 (-I Sin[x2])^4 + 4 (-I Sin[x2])^2 Cos[x2]^2))*(6 (-I Sin[x3])^2 Cos[x3]^2))/Sqrt[2^nqubits];
probability[x1_,y1_,x2_,y2_,x3_,y3_] := Abs[amplitude[x1,y1,x2,y2,x3,y3]]^2;

result = Maximize[{nstates*probability[a, b, c, d, e, f], 0 <= a < Pi/2, 0 <= b < Pi, 0 <= c < Pi/2, 0 <= d < Pi, 0 <= e < Pi/2, 0 <= f < Pi}, {a, b, c, d, e, f}, Method -> {"SimulatedAnnealing", "PerturbationScale" -> 2}];
Print[name,  ": ", result]

n = Pi;
